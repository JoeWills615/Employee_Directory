{"version":3,"sources":["utils/API.js","components/Jumbotron/Jumbotron.js","components/Employee/Employee.js","components/Wrapper/index.js","components/Searchbar/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Jumbotron","className","Employee","props","onClick","sortUsers","users","map","login","name","picture","email","phone","key","uuid","src","large","alt","first","last","Wrapper","SearchBar","type","id","placeholder","App","useState","employees","setEmployees","useEffect","API","then","res","length","data","results","console","log","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oRAEe,EACD,WACN,OAAOA,IAAMC,IAAI,iD,QCSVC,MAXf,WACI,OACI,yBAAKC,UAAU,qCACf,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,0BAAd,sBACA,wBAAIA,UAAU,0BAAd,iCC0BGC,MA/Bf,SAAkBC,GACd,OACI,yBAAKF,UAAU,mBACX,6BACI,2BAAOA,UAAU,wBACb,+BACI,wBAAIA,UAAU,UACV,wBAAIA,UAAU,YAAd,YACA,wBAAIA,UAAU,YAAW,0BAAMG,QAASD,EAAME,WAArB,SACzB,wBAAIJ,UAAU,YAAd,SACA,wBAAIA,UAAU,YAAd,WAGR,+BACKE,EAAMG,MAAMC,KAAI,YAA6C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC7C,OACA,wBAAIX,UAAU,SAASY,IAAKL,EAAMM,MAC9B,wBAAIb,UAAU,YAAW,yBAAKc,IAAKL,EAAQM,MAAOC,IAAI,cACtD,wBAAIhB,UAAU,YAAYQ,EAAKS,MAA/B,IAAuCT,EAAKU,MAC5C,wBAAIlB,UAAU,YAAYW,GAC1B,wBAAIX,UAAU,YAAYU,Y,MCf3CS,MAJf,SAAiBjB,GACf,OAAO,wCAAMF,UAAU,WAAcE,KCUxBkB,MAZf,WACI,OACI,yBAAKpB,UAAU,aACf,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,8BACX,2BAAOqB,KAAK,OAAOrB,UAAU,eAAesB,GAAG,wBAAwBC,YAAY,oBCgCpFC,MA9Bf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,KAgBb,OAdFC,qBAAU,WACNC,IACCC,MAAK,SAACC,GACDL,EAAUM,SACZL,EAAaI,EAAIE,KAAKC,SACtBC,QAAQC,IAAKV,OAIhBW,OAAM,SAAAC,GACLH,QAAQC,IAAKE,QAGjB,CAACZ,EAAWC,IAEV,kBAAC,IAAD,KACI,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUtB,MAAOqB,QCpBPa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAiB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.68f2abe3.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    getUsers: function() {\r\n        return axios.get('https://randomuser.me/api/?results=10&nat=us');\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid bg-dark\">\r\n        <div className=\"container-fluid\">\r\n            <h1 className=\"text-center text-white\">Employee Directory</h1>\r\n            <h5 className=\"text-center text-white\">Search For Your Co-Workers</h5>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\nfunction Employee(props) {\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div>\r\n                <table className=\"table table-bordered\">\r\n                    <thead>\r\n                        <tr className=\"d-flex\">\r\n                            <th className=\"col-sm-3\">Employee</th>\r\n                            <th className=\"col-sm-3\"><span onClick={props.sortUsers}>Name</span></th>\r\n                            <th className=\"col-sm-3\">Phone</th>\r\n                            <th className=\"col-sm-3\">Email</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {props.users.map(({ login, name, picture, email, phone }) => {\r\n                            return (\r\n                            <tr className=\"d-flex\" key={login.uuid}>\r\n                                <th className=\"col-sm-3\"><img src={picture.large} alt=\"employee\" /></th>\r\n                                <td className=\"col-sm-3\">{name.first} {name.last}</td>\r\n                                <td className=\"col-sm-3\">{phone}</td>\r\n                                <td className=\"col-sm-3\">{email}</td>\r\n                            </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Employee;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <main className=\"wrapper\" {...props} />;\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\r\n\r\nfunction SearchBar() {\r\n    return (\r\n        <div className=\"container\">\r\n        <div className=\"row justify-content-center\">\r\n            <div className=\"col-lg-4 col-md-4 col-sm-6\">\r\n                <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Search Here\"></input>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import React, {useState,useEffect} from \"react\";\nimport API from \"./utils/API\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Jumbotron from './components/Jumbotron/Jumbotron';\nimport Employee from './components/Employee/Employee';\nimport Wrapper from './components/Wrapper';\nimport SearchBar from './components/Searchbar/SearchBar';\n\n\nfunction App() {\n  const [employees, setEmployees] = useState([])\nuseEffect(() => {\n    API.getUsers()\n    .then((res) => {\n      if(!employees.length){\n        setEmployees(res.data.results)\n        console.log (employees)\n      }\n       \n    })\n    .catch(err => {\n      console.log (err)\n    })\n   \n},[employees, setEmployees])\n  return (\n    <Router>\n        <div>\n          <Jumbotron />\n          <SearchBar />\n          <br />\n          <Wrapper>\n          <Employee users={employees}/>\n          </Wrapper>\n        </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}